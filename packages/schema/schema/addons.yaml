$schema: "http://json-schema.org/draft-07/schema#"
definitions:
  AddonResourceActions:
    type: string
    enum:
      - directory
      - item
      - source
      - subtitle
      - resolve
      - captcha
      # LEGACY
      - repository
      - iptv
  AddonActions:
    oneOf:
      - type: string
        enum: [selftest, addon]
      - $ref: "#/definitions/AddonResourceActions"
  Addon:
    type: object
    required: [id, name]
    properties:
      id:
        description: ID of this addon.
        type: string
      name:
        description: Name of this addon, optionally localized.
        oneOf:
          - $ref: "general.yaml#/definitions/TranslatedText"
      version:
        description: Version in semver format.
        type: string
        default: "1.0.0"
      icon:
        description: |
          Addon icon which is displayed on the addon index page and
          source list.
          Can be a relative path to the addon URL.
        oneOf:
          - $ref: "general.yaml#/definitions/Image"
      homepage:
        description: Homepage.
        oneOf:
          - $ref: "general.yaml#/definitions/Url"
      description:
        description: Short description of this addon.
        oneOf:
          - $ref: "general.yaml#/definitions/TranslatedText"
      adult:
        description: Have to be `true` if this addon provides adult content.
        type: boolean
        default: false
      devModeOnly:
        description: |
          If `true`, this addon is only available when developer mode is enabled.
        type: boolean
        default: false
      regions:
        description: Regions where this addon is available, or forbidden.
        oneOf:
          - $ref: "general.yaml#/definitions/Regions"
      endpoints:
        description: |
          List of mirror endpoints for this addon. If not set, the URL for the endpoint
          will be created when the addon is installed.
          Relative URL's are also supported.
          For example:
          `[
            "https://www.addon-server.com/path/to/addon",
            "https://www.backup-server.com/back/path",
            "../other/path"
          ]`
        type: array
        items:
          type: string
      actions:
        description: Addon actions this addon provides.
        type: array
        items:
          $ref: "#/definitions/AddonResourceActions"
      itemTypes:
        description: |
          Actions: `directory`, `item`, `source`, `subtitle`
          Item types this addon provised.
          This is needed for the actions `directory`, `item`,
          `source` and `subtitle`.
        type: array
        items:
          $ref: "items.yaml#/definitions/ItemTypes"
      triggers:
        description: |
          Actions: `item`, `source`, `subtitle`
          See `ItemRequest` for a list of supported keys. All
          keys except `name`, `year`, `releaseDate`, `season`
          and `episode` are treated as an ID. Use an array to
          require a combination of keys.
          Example:
            [
              "id/tmdb", // Need item.ids.tmdb
              "id/imdb_id", // Need item.ids.tmdb
              "otherid", // Need item.ids.otherid
              ["name", "year"], // Need item.name and item.year
              ["name", "releaseDate"], // Need item.name and item.releaseDate
            ]
          By default an ID named after `Addon.id` will be matched as well.
        type: array
        items:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
      urlPatterns:
        description: |
          Actions: `resolve`
          URL patterns which match against `Source.url` URL's.
          If a pattern matches, the addon's `resolve` action is called.
          By default all URL's matching the pattern `{addonId}://` will
          call your addon.
        type: array
        items:
          type: string
      captchaTypes:
        description: |
          Actions: `captcha`
          Captcha types this addon can handle.
        type: array
        items:
          $ref: "tasks.yaml#/definitions/CaptchaTypes"
      defaultDirectoryOptions:
        $ref: "directories.yaml#/definitions/DirectoryOptions"
      defaultDirectoryFeatures:
        $ref: "directories.yaml#/definitions/DirectoryFeatures"
      rootDirectories:
        description: |
          Actions: `directory`
          Predefined root directories. Here you also can define features.
          `DashboardItem` objects can reference to this objects by it's `id` field.
          Directories which have the `search` feature enabled will be displayed
          on the search screen of the client app.
        type: array
        items:
          $ref: "directories.yaml#/definitions/RootDirectoryItem"
      dashboards:
        description: |
          Actions: `directory`
          Predefined dashboards. This dashboards get updated when the addon is
          updated. The dashboard configuration is preserved.
        type: array
        items:
          $ref: "directories.yaml#/definitions/DashboardItem"
      requirements:
        description: |
          List of other addons which should be installed. The values can be an
          URL to an addon, or a path relative to the current addon.
          Eg:
          - `https://example.com/mediaurl/v1/some.addon.id`
          - `../relative/path-to/current/addon`
        type: array
        items:
          type: string
