$schema: "http://json-schema.org/draft-07/schema#"
definitions:
  AddonResourceActions:
    type: string
    enum: [directory, item, source, subtitle, resolve, captcha, iptv]
  AddonActions:
    oneOf:
      - type: string
        enum: [selftest, addon]
      - $ref: "#/definitions/AddonResourceActions"
  Addon:
    type: object
    required: [id, name, version]
    properties:
      id:
        description: ID of this addon.
        type: string
      name:
        description: Name of this addon, optionally localized.
        oneOf:
          - $ref: "general.yaml#/definitions/TranslatedText"
      version:
        description: Version in semver format.
        type: string
      poster:
        description: |
          Image which will be displayed on the addon detail page.
          Can be a relative path to the addon URL.
        oneOf:
          - $ref: "general.yaml#/definitions/Image"
      icon:
        description: |
          Addon icon which is displayed on the addon index page and
          source list.
          Can be a relative path to the addon URL.
        oneOf:
          - $ref: "general.yaml#/definitions/Image"
      homepage:
        description: Homepage.
        oneOf:
          - $ref: "general.yaml#/definitions/Url"
      description:
        description: Short description of this addon.
        oneOf:
          - $ref: "general.yaml#/definitions/TranslatedText"
      flags:
        description: Flags.
        type: object
        properties:
          adult:
            description: Have to be `true` if this addon provides adult content.
            type: boolean
          devModeOnly:
            description: |
              If `true`, this addon is only available when developer mode is enabled.
            type: boolean
          platforms:
            description: |
              Array of platforms where this addon is available. If it's an empty array
              or not set, it's available on all platforms.
            type: array
            items:
              type: string
        default:
          adult: false
          devModeOnly: false
      regions:
        description: Regions where this addon is available
        oneOf:
          - $ref: "general.yaml#/definitions/Regions"
      endpoints:
        description: |
          List of API endpoints for this addon. If not set, the URL for the endpoint will
          be set created when the addon is installed in the app.
          Relative URL's are also supported.
          For example:
          `[
            "https://www.addon-server.com/path/to/addon",
            "https://www.backup-server.com/back/path",
            "../other/path"
          ]`
        type: array
        items:
          type: string
        default: []
      actions:
        description: |
          Addon actions.
          If the action `directory` is set, but no `dashboards`
          are defined, a default dashboard will be created.
        type: array
        items:
          $ref: "#/definitions/AddonResourceActions"
      itemTypes:
        description: |
          Actions: `directory`, `item`, `source`, `subtitle`
          Item types this addon provised.
          This is needed for the actions `directory`, `item`,
          `source` and `subtitle`.
        type: array
        items:
          $ref: "items.yaml#/definitions/ItemTypes"
        default: []
      triggers:
        description: |
          Actions: `item`, `source`, `subtitle`
          See `ItemRequest` for a list of supported keys. All
          keys except `name`, `year`, `releaseDate`, `season`
          and `episode` are treated as an ID. Use an array to
          require a combination of keys.
          Example:
            [
              "id/tmdb", // Need item.ids.tmdb
              "id/imdb_id", // Need item.ids.tmdb
              "otherid", // Need item.ids.otherid
              ["name", "year"], // Need item.name and item.year
              ["name", "releaseDate"], // Need item.name and item.releaseDate
            ]
          By default an ID named after `Addon.id` will be matched as well.
        type: array
        items:
          oneOf:
            - type: array
              items:
                type: string
            - type: string
        default: []
      urlPatterns:
        description: |
          Actions: `resolve`
          URL patterns which match against `Source.url` URL's.
          If a pattern matches, the addon's `resolve` action is called.
          By default all URL's matching the pattern `{addonId}://` will
          call your addon.
        type: array
        items:
          type: string
        default: []
      captchaTypes:
        description: |
          Actions: `captcha`
          Captcha types this addon can handle.
        type: array
        items:
          $ref: "tasks.yaml#/definitions/CaptchaTypes"
        default: []
      defaultDirectoryOptions:
        $ref: "directories.yaml#/definitions/DirectoryOptions"
      defaultDirectoryFeatures:
        $ref: "directories.yaml#/definitions/DirectoryFeatures"
      rootDirectories:
        description: |
          Predefined root directories. Here you also can define features.
          `DashboardItem` objects can reference to this objects by it's `id` field.
          Directories which have the `search` feature enabled will be displayed
          on the search screen of the client app.
        type: array
        items:
          $ref: "directories.yaml#/definitions/RootDirectoryItem"
        default: []
      dashboards:
        description: |
          Predefined dashboards. This dashboards get updated when the addon is
          updated. The dashboard configuration is preserved.
        type: array
        items:
          $ref: "directories.yaml#/definitions/DashboardItem"
        default: []
      requirements:
        description: |
          List of required addons.
          The values can be an URL to an addon, or also a
          relative path to the current addon.
          Eg:
          - `https://example.com/mediaurl/v1/some.addon.id`
          - `../relative/path-to/current/addon`
        type: array
        items:
          $ref: "general.yaml#/definitions/Url"
  # IptvAddon:
  #   description: |
  #     Model for the IPTV engine. This is internally converted
  #     to a worker addon.
  #   allOf:
  #     - $ref: "#/definitions/VirtualAddon"
  #     - type: object
  #       properties:
  #         type:
  #           type: string
  #           enum: [iptv]
  #         playlistUrl:
  #           description: |
  #             URL to the playlist. If set, this playlist will be loaded by the app
  #             If not set, the `playlist` action handler will be called.
  #           oneOf:
  #             - $ref: "general.yaml#/definitions/Url"
  #         refreshInterval:
  #           description: Playlist refresh interval in hours.
  #           type: number
  #           minimum: 1
  #           maximum: 1000
  #           default: 12
  #       required: [type]
